
(function(){
  const $ = (s,c=document)=>c.querySelector(s);
  const state={attendees:[],agenda:[],tz:Intl.DateTimeFormat().resolvedOptions().timeZone||"America/New_York"};
  const fmt=(d)=>{const p=n=>String(n).padStart(2,'0');return `${d.getFullYear()}-${p(d.getMonth()+1)}-${p(d.getDate())}T${p(d.getHours())}:${p(d.getMinutes())}`;}
  const title=$('#title'),organizer=$('#organizer'),locationEl=$('#location'),date=$('#date'),duration=$('#duration'),tz=$('#tz');
  const addEmail=$('#add-email'),emailInput=$('#email-input'),agendaList=$('.agenda-list'),agendaTitle=$('#agenda-title'),agendaMins=$('#agenda-mins'),agendaBtn=$('#agenda-add'),agendaTotal=$('#agenda-total'),notes=$('#notes');
  const generateBtn=$('#generate'),downloadICSBtn=$('#download-ics'),copyAgendaBtn=$('#copy-agenda'),exportJSONBtn=$('#export-json'),importJSONBtn=$('#import-json'),startBtn=$('#start-meeting'),timerEl=$('#timer'),statusEl=$('#status');
  tz.value=state.tz; const now=new Date(); now.setMinutes(now.getMinutes()+30-(now.getMinutes()%30)); date.value=fmt(now);
  function renderAttendees(){const box=document.querySelector('.tagbox'); box.innerHTML=''; state.attendees.forEach((e,i)=>{const t=document.createElement('span');t.className='tag';t.innerHTML=`<span>${e}</span><button data-i="${i}">×</button>`;box.appendChild(t);}); box.onclick=e=>{if(e.target.matches('button[data-i]')){state.attendees.splice(+e.target.dataset.i,1);renderAttendees();kpis();}}; kpis();}
  addEmail.addEventListener('click',()=>{const v=emailInput.value.trim(); if(!v) return; if(!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(v)){alert('Enter a valid email');return;} state.attendees.push(v); emailInput.value=''; renderAttendees();});
  function renderAgenda(){agendaList.innerHTML=''; state.agenda.forEach((it,idx)=>{const r=document.createElement('div'); r.className='agenda-item'; r.innerHTML=`<input class="input" value="${it.title}" data-field="title" data-i="${idx}" /><input class="input" type="number" min="1" value="${it.mins}" data-field="mins" data-i="${idx}" /><button class="btn warn" data-del="${idx}">✕</button>`; agendaList.appendChild(r);}); agendaList.oninput=e=>{const i=+e.target.dataset.i,f=e.target.dataset.field; if(f==='title') state.agenda[i].title=e.target.value; if(f==='mins') state.agenda[i].mins=Math.max(1,parseInt(e.target.value||'1',10)); sumAgenda();}; agendaList.onclick=e=>{if(e.target.dataset.del){state.agenda.splice(+e.target.dataset.del,1); renderAgenda(); sumAgenda();}}; sumAgenda();}
  function sumAgenda(){const total=state.agenda.reduce((a,b)=>a+(parseInt(b.mins)||0),0); agendaTotal.textContent=total+' min'; agendaTotal.style.color=(parseInt(duration.value||'0',10)&&total>parseInt(duration.value,10))?'var(--warn)':'var(--ink)'; kpis();}
  agendaBtn.addEventListener('click',()=>{const t=agendaTitle.value.trim(); const m=Math.max(1,parseInt(agendaMins.value||'0',10)); if(!t) return; state.agenda.push({title:t, mins:m}); agendaTitle.value=''; agendaMins.value='5'; renderAgenda();});
  function kpis(){$('#kpi-attendees').textContent=state.attendees.length; $('#kpi-agenda').textContent=state.agenda.length; $('#kpi-mins').textContent=state.agenda.reduce((a,b)=>a+(+b.mins||0),0);}
  function buildNotes(){const L=[]; L.push(`# ${title.value||'Untitled Meeting'}`); L.push(`**Organizer:** ${organizer.value||'-'}  `); L.push(`**When:** ${date.value||'-'} ${tz.value}  `); L.push(`**Where:** ${locationEl.value||'Online'}  `); L.push(`**Attendees:** ${state.attendees.join(', ')||'-'}  `); L.push('\n## Agenda'); state.agenda.forEach((it,i)=>L.push(`${i+1}. ${it.title} — ${it.mins} min`)); L.push('\n## Notes\n- '); L.push('\n## Action Items\n- [ ] '); return L.join('\n');}
  function copy(t){navigator.clipboard.writeText(t).catch(()=>alert('Copy failed'));}
  copyAgendaBtn.addEventListener('click',()=>copy(buildNotes()));
  function toICS(){const startLocal=new Date(date.value); if(isNaN(+startLocal)){alert('Set a valid date/time'); return null;} const durMin=Math.max(1,parseInt(duration.value||'30',10)); const endLocal=new Date(startLocal.getTime()+durMin*60000); const startUTC=new Date(startLocal.getTime()-startLocal.getTimezoneOffset()*60000); const endUTC=new Date(endLocal.getTime()-endLocal.getTimezoneOffset()*60000); const dt=d=>d.toISOString().replace(/[-:]/g,'').replace(/\.\d{3}Z$/,'Z'); const esc=s=>String(s||'').replace(/[,\n]/g,c=>({',':'\\,','\n':'\\n'}[c])); const lines=['BEGIN:VCALENDAR','PRODID:-//MBCC//Meeting Automator//EN','VERSION:2.0','CALSCALE:GREGORIAN','METHOD:REQUEST','BEGIN:VEVENT',`UID:mbcc-${Date.now()}`,`DTSTAMP:${dt(new Date())}`,`DTSTART:${dt(startUTC)}`,`DTEND:${dt(endUTC)}`,`SUMMARY:${esc(title.value||'Untitled Meeting')}`,`DESCRIPTION:${esc(buildNotes())}`,`LOCATION:${esc(locationEl.value||'Online')}`,...state.attendees.map(a=>`ATTENDEE;ROLE=REQ-PARTICIPANT;PARTSTAT=NEEDS-ACTION;RSVP=TRUE:mailto:${a}`), organizer.value?`ORGANIZER:mailto:${organizer.value}`:'','BEGIN:VALARM','TRIGGER:-PT15M','ACTION:DISPLAY','DESCRIPTION:Reminder','END:VALARM','END:VEVENT','END:VCALENDAR'].filter(Boolean); return lines.join('\r\n');}
  function download(filename,content,mime='text/plain'){const blob=new Blob([content],{type:mime}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download=filename; document.body.appendChild(a); a.click(); setTimeout(()=>{URL.revokeObjectURL(url); a.remove();},100);}
  downloadICSBtn.addEventListener('click',()=>{const ics=toICS(); if(!ics) return; const name=(title.value||'meeting').toLowerCase().replace(/\s+/g,'-')+'.ics'; download(name,ics,'text/calendar');});
  exportJSONBtn.addEventListener('click',()=>{const payload={v:1,title:title.value,organizer:organizer.value,location:locationEl.value,date:date.value,duration:duration.value,tz:tz.value,attendees:state.attendees,agenda:state.agenda,notes:notes.value}; localStorage.setItem('mbcc_meeting',JSON.stringify(payload)); download('meeting.json',JSON.stringify(payload,null,2),'application/json'); status('Saved + downloaded JSON');});
  importJSONBtn.addEventListener('click',()=>{const inp=document.createElement('input'); inp.type='file'; inp.accept='application/json'; inp.onchange=()=>{const f=inp.files[0]; if(!f) return; const r=new FileReader(); r.onload=()=>{try{const d=JSON.parse(r.result); title.value=d.title||''; organizer.value=d.organizer||''; locationEl.value=d.location||''; date.value=d.date||date.value; duration.value=d.duration||'60'; tz.value=d.tz||tz.value; state.attendees=d.attendees||[]; state.agenda=d.agenda||[]; notes.value=d.notes||''; renderAttendees(); renderAgenda(); sumAgenda(); kpis(); status('Imported JSON');}catch(e){alert('Invalid JSON');}}; r.readAsText(f);}; inp.click();});
  notes.value=localStorage.getItem('mbcc_notes')||''; notes.addEventListener('input',()=>localStorage.setItem('mbcc_notes',notes.value));
  generateBtn.addEventListener('click',()=>{if(!notes.value) notes.value=buildNotes(); const subject=encodeURIComponent(`[${title.value||'Meeting'}] ${date.value}`); const body=encodeURIComponent(buildNotes()+`\n\n— Sent via MBCC Meeting Automator`); $('#mail-draft').href=`mailto:${state.attendees.join(',')}`+`?subject=${subject}&body=${body}`; status('Drafted email');});
  let timer=null,left=0,current=0; function tick(){ if(left<=0){ if(current<state.agenda.length-1){current++; left=(parseInt(state.agenda[current].mins)||1)*60; status('Next: '+state.agenda[current].title);} else { stopTimer(); status('Meeting done ✅'); return; } } left--; const m=Math.floor(left/60), s=left%60; timerEl.querySelector('b').textContent=`${String(m).padStart(2,'0')}:${String(s).padStart(2,'0')}`; $('#current-topic').textContent=state.agenda[current]?.title||'—';}
  function startTimer(){ if(state.agenda.length===0){alert('Add at least one agenda item.'); return;} current=0; left=(parseInt(state.agenda[0].mins)||1)*60; timerEl.style.opacity='1'; timer=setInterval(tick,1000); status('Timer started'); }
  function stopTimer(){ clearInterval(timer); timer=null; timerEl.style.opacity='.8'; }
  startBtn.addEventListener('click',()=> (timer? stopTimer() : startTimer()));
  function status(msg){ statusEl.textContent=msg; setTimeout(()=> statusEl.textContent='', 3000); }
  try{ const saved=JSON.parse(localStorage.getItem('mbcc_meeting')||'null'); if(saved){ title.value=saved.title||''; organizer.value=saved.organizer||''; locationEl.value=saved.location||''; date.value=saved.date||date.value; duration.value=saved.duration||'60'; tz.value=saved.tz||tz.value; state.attendees=saved.attendees||[]; state.agenda=saved.agenda||[]; } }catch{}
  renderAttendees(); renderAgenda(); sumAgenda(); kpis();
})();
