openapi: 3.1.0
info:
  title: Hazel API â€” AI Video Creation
  version: "1.0.0"
  description: |
    Backend API for Hazel (MCC) to manage assets, projects, storyboards, and renders.
servers:
  - url: https://api.moecommunitycloud.com
  - url: http://localhost:7071
security:
  - bearerAuth: []
paths:
  /v1/health:
    get:
      summary: Health check
      operationId: health
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"
  /v1/assets/upload-urls:
    post:
      summary: Create pre-signed upload URLs for assets
      operationId: createUploadUrls
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetUploadRequest"
      responses:
        "200":
          description: Upload URLs created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetUploadResponse"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
  /v1/projects:
    post:
      summary: Create project
      operationId: createProject
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreate"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
    get:
      summary: List projects
      operationId: listProjects
      responses:
        "200":
          description: Project list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedProjects"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      schema: { type: string }
  responses:
    BadRequest:
      description: Bad request
    Unauthorized:
      description: Unauthorized
  schemas:
    Health:
      type: object
      properties:
        status: { type: string }
    AssetUploadRequest:
      type: object
      properties:
        files:
          type: array
          items:
            type: object
            properties:
              filename: { type: string }
              contentType: { type: string }
      required: [files]
    AssetUploadResponse:
      type: object
      properties:
        uploads:
          type: array
          items:
            type: object
            properties:
              assetId: { type: string }
              putUrl: { type: string }
              headers: { type: object }
              expiresAt: { type: string }
    ProjectCreate:
      type: object
      properties:
        title: { type: string }
        ratio: { type: string }
        style: { type: string }
        voice: { type: string }
        script: { type: string }
        assetIds:
          type: array
          items: { type: string }
      required: [title]
    Project:
      type: object
      properties:
        projectId: { type: string }
        title: { type: string }
    PaginatedProjects:
      type: object
      properties:
        items:
          type: array
          items: { $ref: "#/components/schemas/Project" }
